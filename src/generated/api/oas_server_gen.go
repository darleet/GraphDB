// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// RaftGetVertex implements raftGetVertex operation.
	//
	// Получает вершину из указанной таблицы.
	//
	// GET /raft/vertices
	RaftGetVertex(ctx context.Context, params RaftGetVertexParams) (RaftGetVertexRes, error)
	// RaftInsertEdge implements raftInsertEdge operation.
	//
	// Создаёт ребро в указанной таблице. from/to —
	// идентификаторы вершин (UUID).
	//
	// POST /raft/edges
	RaftInsertEdge(ctx context.Context, req *InsertEdgeRequest) (RaftInsertEdgeRes, error)
	// RaftInsertEdges implements raftInsertEdges operation.
	//
	// Пакетная вставка рёбер в одну таблицу.
	//
	// POST /raft/edges/batch
	RaftInsertEdges(ctx context.Context, req *InsertEdgesRequest) (RaftInsertEdgesRes, error)
	// RaftInsertVertex implements raftInsertVertex operation.
	//
	// Создаёт вершину в указанной таблице.
	//
	// POST /raft/vertices
	RaftInsertVertex(ctx context.Context, req *InsertVertexRequest) (RaftInsertVertexRes, error)
	// RaftInsertVertices implements raftInsertVertices operation.
	//
	// Пакетная вставка нескольких вершин в одну таблицу.
	//
	// POST /raft/vertices/batch
	RaftInsertVertices(ctx context.Context, req *InsertVerticesRequest) (RaftInsertVerticesRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
