// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/EdgeIDResponse
type EdgeIDResponse struct {
	ID UUID `json:"id"`
}

// GetID returns the value of ID.
func (s *EdgeIDResponse) GetID() UUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *EdgeIDResponse) SetID(val UUID) {
	s.ID = val
}

func (*EdgeIDResponse) raftInsertEdgeRes() {}

// Ref: #/components/schemas/EdgeIDsResponse
type EdgeIDsResponse struct {
	Ids []UUID `json:"ids"`
}

// GetIds returns the value of Ids.
func (s *EdgeIDsResponse) GetIds() []UUID {
	return s.Ids
}

// SetIds sets the value of Ids.
func (s *EdgeIDsResponse) SetIds(val []UUID) {
	s.Ids = val
}

func (*EdgeIDsResponse) raftInsertEdgesRes() {}

// Ref: #/components/schemas/EdgeInfo
type EdgeInfo struct {
	From UUID `json:"from"`
	To   UUID `json:"to"`
	// Необязательные свойства ребра.
	Properties OptEdgeInfoProperties `json:"properties"`
}

// GetFrom returns the value of From.
func (s *EdgeInfo) GetFrom() UUID {
	return s.From
}

// GetTo returns the value of To.
func (s *EdgeInfo) GetTo() UUID {
	return s.To
}

// GetProperties returns the value of Properties.
func (s *EdgeInfo) GetProperties() OptEdgeInfoProperties {
	return s.Properties
}

// SetFrom sets the value of From.
func (s *EdgeInfo) SetFrom(val UUID) {
	s.From = val
}

// SetTo sets the value of To.
func (s *EdgeInfo) SetTo(val UUID) {
	s.To = val
}

// SetProperties sets the value of Properties.
func (s *EdgeInfo) SetProperties(val OptEdgeInfoProperties) {
	s.Properties = val
}

// Необязательные свойства ребра.
type EdgeInfoProperties map[string]jx.Raw

func (s *EdgeInfoProperties) init() EdgeInfoProperties {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    string          `json:"code"`
	Message string          `json:"message"`
	Details OptErrorDetails `json:"details"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptErrorDetails {
	return s.Details
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptErrorDetails) {
	s.Details = val
}

type ErrorDetails map[string]jx.Raw

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/InsertEdgeRequest
type InsertEdgeRequest struct {
	// Имя таблицы ребра (типа ребра).
	Table string   `json:"table"`
	Edge  EdgeInfo `json:"edge"`
}

// GetTable returns the value of Table.
func (s *InsertEdgeRequest) GetTable() string {
	return s.Table
}

// GetEdge returns the value of Edge.
func (s *InsertEdgeRequest) GetEdge() EdgeInfo {
	return s.Edge
}

// SetTable sets the value of Table.
func (s *InsertEdgeRequest) SetTable(val string) {
	s.Table = val
}

// SetEdge sets the value of Edge.
func (s *InsertEdgeRequest) SetEdge(val EdgeInfo) {
	s.Edge = val
}

// Ref: #/components/schemas/InsertEdgesRequest
type InsertEdgesRequest struct {
	// Имя таблицы рёбер (типа рёбер).
	Table string     `json:"table"`
	Edges []EdgeInfo `json:"edges"`
}

// GetTable returns the value of Table.
func (s *InsertEdgesRequest) GetTable() string {
	return s.Table
}

// GetEdges returns the value of Edges.
func (s *InsertEdgesRequest) GetEdges() []EdgeInfo {
	return s.Edges
}

// SetTable sets the value of Table.
func (s *InsertEdgesRequest) SetTable(val string) {
	s.Table = val
}

// SetEdges sets the value of Edges.
func (s *InsertEdgesRequest) SetEdges(val []EdgeInfo) {
	s.Edges = val
}

// Ref: #/components/schemas/InsertVertexRequest
type InsertVertexRequest struct {
	// Имя таблицы (типа вершины).
	Table  string     `json:"table"`
	Record VertexInfo `json:"record"`
}

// GetTable returns the value of Table.
func (s *InsertVertexRequest) GetTable() string {
	return s.Table
}

// GetRecord returns the value of Record.
func (s *InsertVertexRequest) GetRecord() VertexInfo {
	return s.Record
}

// SetTable sets the value of Table.
func (s *InsertVertexRequest) SetTable(val string) {
	s.Table = val
}

// SetRecord sets the value of Record.
func (s *InsertVertexRequest) SetRecord(val VertexInfo) {
	s.Record = val
}

// Ref: #/components/schemas/InsertVerticesRequest
type InsertVerticesRequest struct {
	// Имя таблицы (типов вершин).
	Table   string       `json:"table"`
	Records []VertexInfo `json:"records"`
}

// GetTable returns the value of Table.
func (s *InsertVerticesRequest) GetTable() string {
	return s.Table
}

// GetRecords returns the value of Records.
func (s *InsertVerticesRequest) GetRecords() []VertexInfo {
	return s.Records
}

// SetTable sets the value of Table.
func (s *InsertVerticesRequest) SetTable(val string) {
	s.Table = val
}

// SetRecords sets the value of Records.
func (s *InsertVerticesRequest) SetRecords(val []VertexInfo) {
	s.Records = val
}

// NewOptEdgeInfoProperties returns new OptEdgeInfoProperties with value set to v.
func NewOptEdgeInfoProperties(v EdgeInfoProperties) OptEdgeInfoProperties {
	return OptEdgeInfoProperties{
		Value: v,
		Set:   true,
	}
}

// OptEdgeInfoProperties is optional EdgeInfoProperties.
type OptEdgeInfoProperties struct {
	Value EdgeInfoProperties
	Set   bool
}

// IsSet returns true if OptEdgeInfoProperties was set.
func (o OptEdgeInfoProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEdgeInfoProperties) Reset() {
	var v EdgeInfoProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEdgeInfoProperties) SetTo(v EdgeInfoProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEdgeInfoProperties) Get() (v EdgeInfoProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEdgeInfoProperties) Or(d EdgeInfoProperties) EdgeInfoProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorDetails returns new OptErrorDetails with value set to v.
func NewOptErrorDetails(v ErrorDetails) OptErrorDetails {
	return OptErrorDetails{
		Value: v,
		Set:   true,
	}
}

// OptErrorDetails is optional ErrorDetails.
type OptErrorDetails struct {
	Value ErrorDetails
	Set   bool
}

// IsSet returns true if OptErrorDetails was set.
func (o OptErrorDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorDetails) Reset() {
	var v ErrorDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorDetails) SetTo(v ErrorDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorDetails) Get() (v ErrorDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorDetails) Or(d ErrorDetails) ErrorDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVertexInfoProperties returns new OptVertexInfoProperties with value set to v.
func NewOptVertexInfoProperties(v VertexInfoProperties) OptVertexInfoProperties {
	return OptVertexInfoProperties{
		Value: v,
		Set:   true,
	}
}

// OptVertexInfoProperties is optional VertexInfoProperties.
type OptVertexInfoProperties struct {
	Value VertexInfoProperties
	Set   bool
}

// IsSet returns true if OptVertexInfoProperties was set.
func (o OptVertexInfoProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVertexInfoProperties) Reset() {
	var v VertexInfoProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVertexInfoProperties) SetTo(v VertexInfoProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVertexInfoProperties) Get() (v VertexInfoProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVertexInfoProperties) Or(d VertexInfoProperties) VertexInfoProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type RaftInsertEdgeBadRequest Error

func (*RaftInsertEdgeBadRequest) raftInsertEdgeRes() {}

type RaftInsertEdgeConflict Error

func (*RaftInsertEdgeConflict) raftInsertEdgeRes() {}

type RaftInsertEdgeInternalServerError Error

func (*RaftInsertEdgeInternalServerError) raftInsertEdgeRes() {}

type RaftInsertEdgesBadRequest Error

func (*RaftInsertEdgesBadRequest) raftInsertEdgesRes() {}

type RaftInsertEdgesConflict Error

func (*RaftInsertEdgesConflict) raftInsertEdgesRes() {}

type RaftInsertEdgesInternalServerError Error

func (*RaftInsertEdgesInternalServerError) raftInsertEdgesRes() {}

type RaftInsertVertexBadRequest Error

func (*RaftInsertVertexBadRequest) raftInsertVertexRes() {}

type RaftInsertVertexConflict Error

func (*RaftInsertVertexConflict) raftInsertVertexRes() {}

type RaftInsertVertexInternalServerError Error

func (*RaftInsertVertexInternalServerError) raftInsertVertexRes() {}

type RaftInsertVerticesBadRequest Error

func (*RaftInsertVerticesBadRequest) raftInsertVerticesRes() {}

type RaftInsertVerticesConflict Error

func (*RaftInsertVerticesConflict) raftInsertVerticesRes() {}

type RaftInsertVerticesInternalServerError Error

func (*RaftInsertVerticesInternalServerError) raftInsertVerticesRes() {}

type UUID uuid.UUID

// Ref: #/components/schemas/VertexIDResponse
type VertexIDResponse struct {
	ID UUID `json:"id"`
}

// GetID returns the value of ID.
func (s *VertexIDResponse) GetID() UUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *VertexIDResponse) SetID(val UUID) {
	s.ID = val
}

func (*VertexIDResponse) raftInsertVertexRes() {}

// Ref: #/components/schemas/VertexIDsResponse
type VertexIDsResponse struct {
	Ids []UUID `json:"ids"`
}

// GetIds returns the value of Ids.
func (s *VertexIDsResponse) GetIds() []UUID {
	return s.Ids
}

// SetIds sets the value of Ids.
func (s *VertexIDsResponse) SetIds(val []UUID) {
	s.Ids = val
}

func (*VertexIDsResponse) raftInsertVerticesRes() {}

// Ref: #/components/schemas/VertexInfo
type VertexInfo struct {
	// Необязательная метка типа вершины.
	Label      OptString               `json:"label"`
	Properties OptVertexInfoProperties `json:"properties"`
}

// GetLabel returns the value of Label.
func (s *VertexInfo) GetLabel() OptString {
	return s.Label
}

// GetProperties returns the value of Properties.
func (s *VertexInfo) GetProperties() OptVertexInfoProperties {
	return s.Properties
}

// SetLabel sets the value of Label.
func (s *VertexInfo) SetLabel(val OptString) {
	s.Label = val
}

// SetProperties sets the value of Properties.
func (s *VertexInfo) SetProperties(val OptVertexInfoProperties) {
	s.Properties = val
}

type VertexInfoProperties map[string]jx.Raw

func (s *VertexInfoProperties) init() VertexInfoProperties {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}
